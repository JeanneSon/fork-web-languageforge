# https://docs.docker.com/compose/compose-file
version: '3.9'
services:
    db:
      image: mongo:4.0
      container_name: lf-db
      volumes:
        - mongo-data:/data/db
      restart: always

    ui:
      build:
        context: ..
        dockerfile: docker/ui/Dockerfile
      image: lf-ui
      container_name: lf-ui
      depends_on:
        - api
      volumes:
        - ../src:/data/src
        - ../typings:/data/typings
        - ../webpack.config.js:/data/webpack.config.js
        - ../gulpfile.js:/data/gulpfile.js

    api:
      build:
        context: ..
        dockerfile: docker/api/Dockerfile
      image: lf-api
      container_name: lf-api
      depends_on:
        - db
        - mail
      volumes:
        - user-data-assets:/var/www/html/assets
        # because the composer vendor dependencies are build inside the container but reside in /var/www/html,
        # we have to manually mount each src folder and file in.
        # TODO: make the application run without having the vendor and src folders tied together so closely
        # This could probably be accomplished with a fancy Apache rewrite script
        # ALTERNATIVE: many of these files could be COPYed in at build time, but then the image would need to be
        # rebuilt if these files were modified (many are unlikely to be modified regularly)
        - ../src/index.php:/var/www/html/index.php
        - ../src/angular-app:/var/www/html/angular-app
        - ../src/Api:/var/www/html/Api
        - ../src/Site:/var/www/html/Site
        - ../src/dist:/var/www/html/dist
        - ../src/appManifest:/var/www/html/appManifest
        - ../src/help:/var/www/html/help
        - ../src/js:/var/www/html/js
        - ../src/json:/var/www/html/json
        - ../src/releasenotes:/var/www/html/releasenotes
        - ../src/resources:/var/www/html/resources
        - ../src/.htaccess:/var/www/html/.htaccess
        - ../src/app_dependencies.json:/var/www/html/app_dependencies.json
        - ../src/config.php:/var/www/html/config.php
        - ../src/favicon.ico:/var/www/html/favicon.ico
        - ../src/offline.html:/var/www/html/offline.html
        - ../src/offlineCheck.txt:/var/www/html/offlineCheck.txt
        - ../src/site_wide_notices.json:/var/www/html/site_wide_notices.json
        - ../src/version.php:/var/www/html/version.php

    api-test:
      build:
        context: ..
        dockerfile: docker/api-test/Dockerfile
      image: lf-api-test
      container_name: lf-api-test
      depends_on:
          - db
          - mail
      volumes:
        - ../test:/data/test
        # these paths are mapped in for developer convenience
        - ../src/index.php:/var/www/html/index.php
        - ../src/angular-app:/var/www/html/angular-app
        - ../src/Api:/var/www/html/Api
        - ../src/Site:/var/www/html/Site
      # profiles: ["test"] TODO: need to understand the compat issues for this config

    ssl:
        image: caddy
        container_name: lf-ssl
        ports:
            - 80:80
            - 443:443
        depends_on:
          - api
        volumes:
            - caddy_data:/data
            - caddy_config:/config
        # https://caddyserver.com/docs/command-line
        command: caddy reverse-proxy --from localhost --to api
        restart: unless-stopped

    mail:
      image: juanluisbaptiste/postfix
      container_name: lf-mail
      volumes:
        - ./mail/main.cf:/etc/postfix/main.cf
      environment:
        SMTP_SERVER: example.com
        SMTP_USERNAME: chris
        SMTP_PASSWORD: password
        SERVER_HOSTNAME: example.com

    db-reset:
      image: lf-php-api
      container_name: lf-db-reset
      depends_on:
        - db
        - mail
      working_dir: /var/www/scripts/tools
      volumes:
        - ../scripts/:/var/www/scripts
      command: php FactoryReset.php run

    # TODO: still needs to be built/run/tested, etc.
    # lfmerge:
    #   container_name: lfmerge
    #   build: lfmerge/.
    #   volumes:
    #     - lfmerge-data:/var/lib/languageforge

volumes:
  mongo-data:
  lfmerge-data:
  caddy_data:
  caddy_config:
  user-data-assets:
